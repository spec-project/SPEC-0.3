%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SPEC
% Copyright (C) 2011-2016 Alwen Tiu, Ross Horne
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this code; if not, write to the Free Software Foundation,
% Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include "trace.def".

Kind stap_action type.
Type stap_act_in  tm -> tm -> stap_action.
Type stap_act_out tm -> tm -> stap_action.
Type absurd stap_action.

Kind def_stap_act type.
Type defStapAct stap_action -> def_stap_act.
Type defStapActAbs (tm -> def_stap_act) -> def_stap_act.

Kind stap_body type.
Type defStapBody def_stap_act -> def_stap_act -> def_body -> stap_body.
Type defStapBodyAbs (tm -> stap_body) -> stap_body.

% Print stap action
Define print_stap_action : stap_action -> prop by
print_stap_action absurd := printstr "absurd";
print_stap_action (stap_act_in A B)  := print_term A /\ printstr "(" /\ print_term B /\ printstr ")";
print_stap_action (stap_act_out A B) := print_term A /\ printstr "<" /\ print_term B /\ printstr ">".

% Get a stap trace of a process (not necessarily a completed trace).
% stap trace does not contain tau
Define get_stap_trace_proc  : list tm -> trace -> proc -> trace -> prop,
       get_stap_trace_agent : list tm -> trace -> action -> agent -> trace -> prop,
       get_stap_trace_cont  : list tm -> trace -> continuation -> trace -> prop 
by

get_stap_trace_agent Vs T1 A (con M P) T :=
		add_out A M T1 T2 /\ get_stap_trace_proc Vs T2 P T ;
get_stap_trace_agent Vs T1 A (abs P) (t_bind T) :=
		nabla x, 
		      add_in A (var x) T1 (T2 x) /\
		      get_stap_trace_proc (cons (var x) Vs) (T2 x) (P (var x)) (T x) ;
get_stap_trace_agent Vs T1 A (new P) (t_bind T) :=
		nabla x, get_stap_trace_agent Vs T1 A (P (nm x)) (T x) ;

get_stap_trace_cont Vs T1 (contProc A Q Sub) T :=
	       copytrace Sub T1 T2 /\ 
	       get_stap_trace_proc Vs T2 Q T ;
          
get_stap_trace_cont Vs T1 (contAgent A Q Sub) T :=
	       copytrace Sub T1 T2 /\
	       get_stap_trace_agent Vs T2 A Q T ;

get_stap_trace_cont Vs T1 (abscont C) (t_bind T) :=
	       nabla x, get_stap_trace_cont (cons (var x) Vs) T1 (C x) (T x) ;

get_stap_trace_proc Vs T P T ;
get_stap_trace_proc Vs T1 P T := c_oneAbs Vs P C /\ get_stap_trace_cont Vs T1 C T ;
get_stap_trace_proc Vs T1 P T := c_oneCon Vs P C /\ get_stap_trace_cont Vs T1 C T. 


% Get stap trace
Define get_stap_trace : proc -> trace -> prop by
get_stap_trace P T := get_stap_trace_proc nil emp P T.

% Convert a trace (without binders) to deducibility constraints.
Define stap_trace_cst : trace -> list tm -> list tm -> list constraint -> prop
by 
stap_trace_cst emp Pre Chnl nil;
stap_trace_cst (t_in (act A) U T) Pre Chnl Cs :=
  _if (det_mem A Chnl)
    (Chnl1 = Chnl /\ Cs = cons (dedl Pre U) Ds)
    (Chnl1 = cons A Chnl /\ Cs = cons (dedl Pre A) (cons (dedl Pre U) Ds))
  /\ stap_trace_cst T Pre Chnl1 Ds;
stap_trace_cst (t_out (act A) U T) Pre Chnl Cs :=
  _if (det_mem A Chnl)
    (Chnl1 = Chnl /\ Cs = Ds)
    (Chnl1 = cons A Chnl /\ Cs = cons (dedl Pre A) Ds)
  /\ stap_trace_cst T (cons U Pre) Chnl1 Ds.

% Combine two substitution list with common variable list
Define stap_combine_subst : list sub_pair -> list sub_pair -> list sub_pair -> prop by
stap_combine_subst nil nil nil;
stap_combine_subst (cons (sub V V) Subst1) (cons (sub V V) Subst2) (cons (sub V V) Subst) := stap_combine_subst Subst1 Subst2 Subst;
stap_combine_subst (cons (sub V A) Subst1) (cons (sub V V) Subst2) (cons (sub V A) Subst) := _not(V = A) /\ stap_combine_subst Subst1 Subst2 Subst;
stap_combine_subst (cons (sub V V) Subst1) (cons (sub V B) Subst2) (cons (sub V B) Subst) := _not(V = B) /\ stap_combine_subst Subst1 Subst2 Subst.

% stap_unify A B M N Vs Subst
% One substitution list to unify A and B; M and N
Define stap_unify : tm -> tm -> tm -> tm -> list tm -> list sub_pair -> prop by
stap_unify A B M N Vs Subst := unify nil A B Vs Subst1 /\ unify nil M N Vs Subst2 /\ stap_combine_subst Subst1 Subst2 Subst.

% Unify an action B with trace T
% B is not unified with t_out (act A) (var X)
Define unify_trace : list tm -> trace -> stap_action -> list sub_pair -> prop by
unify_trace Vs (t_in  (act A) M T) StapAct Subst := (StapAct = stap_act_in  B N /\ stap_unify A B M N Vs Subst) \/ unify_trace Vs T StapAct Subst;
unify_trace Vs (t_out (act A) M T) StapAct Subst := (StapAct = stap_act_out B N /\ stap_unify A B M N Vs Subst) \/ unify_trace Vs T StapAct Subst.

% Get variable list in stap_action
Define stap_get_var : stap_action -> list tm -> list tm -> prop by
stap_get_var (stap_act_in  N M) VarIn VarOut := get_var N VarIn VarOut1 /\ get_var M VarOut1 VarOut;
stap_get_var (stap_act_out N M) VarIn VarOut := get_var N VarIn VarOut1 /\ get_var M VarOut1 VarOut.

% Apply substitution to stap_action
Define copy_stap_action : list sub_pair -> stap_action -> stap_action -> prop by
copy_stap_action Subst (stap_act_in  A M) (stap_act_in  B N) := copyterm Subst A B /\ copyterm Subst M N;
copy_stap_action Subst (stap_act_out A M) (stap_act_out B N) := copyterm Subst A B /\ copyterm Subst M N.

Define before : stap_action -> stap_action -> trace -> prop by
%before A B emp;
before A B (t_in  (act M) N T) :=  _not(B = stap_act_in  U V /\ M = U /\ N = V) /\ ((A = stap_act_in  X Y /\ M = X /\ N = Y) \/ before A B T);
before A B (t_out (act M) N T) :=  _not(B = stap_act_out U V /\ M = U /\ N = V) /\ ((A = stap_act_out X Y /\ M = X /\ N = Y) \/ before A B T).

Define stap : stap_action -> stap_action -> trace -> prop by
stap A B emp;
stap A B (t_bind AbsT) := nabla x, stap A B (AbsT x);

stap A B T :=
  det_or (T = t_in Act M T') (T = t_out Act M T') /\
  %printstr "\nT : " /\ print_trace_action T /\
  printstr "." /\
  stap_get_var B nil VsB /\
  trace_vars T VsB Vars /\
  forall Sub, _distinct(unify_trace Vars T B Sub) ->
    (
      %printstr "\nSub :" /\ print_subst Sub /\
      exists TTheta, copytrace Sub T TTheta /\
      %printstr "\nTTheta :" /\ print_trace_action TTheta /\
      exists Cs, stap_trace_cst TTheta nil nil Cs /\
      exists Vs, trace_vars TTheta nil Vs /\
      forall Sol, _distinct(solve_constraints Vs Cs Sol) ->
        (
	  %printstr "\n\tSol :" /\ print_subst Sol /\
	  % A = absurd will be false in this step
	  exists ATheta, copy_stap_action Sub A ATheta /\
	  exists BTheta, copy_stap_action Sub B BTheta /\
	  exists AThetaTheta, copy_stap_action Sol ATheta AThetaTheta /\ %printstr "\n\tAThetaTheta : " /\ print_stap_action AThetaTheta /\
	  exists BThetaTheta, copy_stap_action Sol BTheta BThetaTheta /\ %printstr "\n\tBThetaTheta : " /\ print_stap_action BThetaTheta /\
	  exists TThetaTheta, copytrace Sol TTheta TThetaTheta /\
	  %printstr "\n\tTThetaTheta : " /\ print_trace_action TThetaTheta /\
	  before AThetaTheta BThetaTheta TThetaTheta
        )
    ).
