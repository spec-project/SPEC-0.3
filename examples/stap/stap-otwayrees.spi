% Otway-Rees protocol
%
% I is a malicious insider, k the new secret key 
% 0. - --> E: A, B, I, kI 
% 1. A --> B: nA, A, B, {nA,A,B}kA 
% 2. B --> S: nA, A, B, {nA,A,B}kA, nB, {nA,A,B}kB 
% 3. S --> B: nA, {k,nA}kA, {k,nB}kB 
% 4. B --> A: nA, {k,nA}kA 

% "There is a subtle attack on this protocol. 
%  The attack shows up in configurations that include a server S, an agent A 
%  that may act either as the receiver or as the responder of a given session, 
%  and a malicious insider I that has registered 
%  himself as a participant, with identifier I and a long-term key kI shared 
%  with S. The role of the intruder is played by the environment. 
%  Agent A is willing to engage in a session with both B and I. 
%  We show below the code corresponding to this 'minimal' configuration."
% Section 7 - Symbolic Trace Analysis of cryptographic protocols (Extended version) - Michele Boreale

% Attack:
% 1. A --> B: nA, A, B, {nA,A,B}kA
% 2. I --> A: nI, I, A, {nI,I,A}kI
% 3. A --> S: nI, I, A, {nI,I,A}kI, nA' {nI,I,A}kA
% 4. I --> S: nI, I, A, {nI,I,A}kI, nA, {nI,I,A}kA
% 5. S --> A: nI, {k, nI}kI, {k,nA}kA
% 6. I --> A: nA, {k,nA}kA

Initiator(agent_A,sk_A,agent_B,accept_AB) :=		% agent_A: Initiator / agent_B: Responder
  nu(na).
  env< < na, agent_A, agent_B, enc(<na, agent_A, agent_B>,ska) > >.
  env(x).						% x <-- <m1, enc(<m2, n2>,ska)>
  let <m1,n1> = x in
  [m1 = na] case n1 of enc(y,sk_A) in
  let <m2,n2> = y in
  [n2 = na] accept_AB<x>;

Responder(agent_A,agent_B,sk_B):=			% agentA: Initiator / agent_B: Responder
  env(x).						% x <-- <m1, m2, m3, n3>
  let <m1,n1> = x in
  let <m2,n2> = n1 in
  [m2 = agent_A] let <m3,n3> = n2 in
  [m3 = agent_B] nu(nb).
  env< < m1, agent_A, agent_B, n3, nb, enc(<m1,agent_A,agent_B>,sk_B) > >.
  env(y).						% y <-- <m4, m5, enc(<m6, n6>,sk_B)>
  let <m4,n4> = y in
  let <m5,n5> = n4 in
  case n5 of enc(z,sk_B) in
  let <m6,n6> = z in
  [m4 = m1] [n6 = nb] env<<m1, m5>>;
  
Server(agent_A,sk_A,agent_B,sk_B) :=			% agentA: Initiator / agent_B: Responder
  env(x).						% x <-- <m1, m2, m3, enc(y,sk_A), m5, enc(z,sk_B)>
  let <m1,n1> = x in
  let <m2,n2> = n1 in
  let <m3,n3> = n2 in
  let <m4,n4> = n3 in
  let <m5,n5> = n4 in
  [m2 = agent_A][m3 = agent_B]
  case m4 of enc(y,sk_A) in
  case n5 of enc(z,sk_B) in
  [<m1,m2,m3> = y]
  [y = z] nu(k).
  env<< m1, enc(<k, m1>, sk_A), enc(<k, m5>, sk_B) >>;

% #load "examples/stap/stap-otwayrees.spi";
% stap(absurd, accept_ab<?t>, nu(ska).env<<a,b,c,skc>>.(Initiator{a,ska,b,accept_ab}|Responder{c,a,ska}|Server{c,skc,a,ska}));	--> Does not hold (+ 117s)
